OKay, uuh so thank you, so  we are trying evaluate our visualization interface called Traveler, So this is, Traveler is actually, it is an integrated visualization system for asynchronous multi-task program, like HPX. So today, at first I am going to give you a brief overview of traveler, then I'll, you'll be asked to perform a seires of trials to conduct on travleler and then I'll ask you some questions about your experience with travleler
P1: do I need uh to use traveler on my end or I just need to...
me: yeah, you have to like uh, load the traveler in your browser and then share your screen so that we can see what is going on. 
P1: ok, I see, go ahead , sorry.
me: ok thank you, so at first I am going to start with a short demo of Traveler. so at first you can go to this link and visit the traveler on your own, so when I am going to like describe any specific feature, you are allowed to like test it out on your own in this link, OK. 
Then I am going start sharing my screen. ok. (after sharing screen) can you see my screen now?
P1: yes, yes
me: ok, thanks for the confirmation. so, this is the Traveler interface. so um here at the bottom right you can see that this is the actual code. this is a phylan code. so phylanx is an asynchronous distributed c++ array processing toolkit library which is built on top of HPX. And I think you might already know that HPX is a c++ standard library for parllelism and concurrency. 
P1: yes
me: so, in Phylanx the function calls, code blocks are refered to as primittives. we are going to, so you might see this term primitive a lot in this session, ok. so keep that in mind please. and so you can see that this is the code. So this trace data is generated from this code. and we are using these charts to visualize the trace data. here at the bottom right you can see this is the gantt view. so a gantt chart uses a series of rectangular bars to show the amount of task being done in certain period of time. so in this case here you can see that since we are executing  our program in a multi-core platform, so, this thing is showing you the how many cores are there. for example, you can see that it uses total 16 cores. and you can see that here there are like 16 rows in here. And each row represents that, how much task is being done at that particular core. ok and each rectangular bar here represents that uh specific execution. for example, this rectangular bar (clicked on it) which is highlighted in orange, it is representing that this task is being executed at core number T5 and it has, in the x-axis is timie in nanoseconds, here at the top right is the selection info view, here you can see that this execution started at this timestamp, like roughly 2 nanoseconds, 2 seconds, and stoped at 2.1 second. here (pointed to the gantt view and scorlled), it is started at roughly 2.1 seconds and stoped before 2.2 seconds. ok. yeah. and this specific rectangular bar, we call this thing intervals. So, this interval belongs to the primitive - uh this primitive, so variable alpha, (highlighted it in the selection info view). if you check in the code, you can see that we declared a varaible alpha, so actually this execution refers to that, we are actually loading this variable. ok. and so in this gantt view, if you start scrolling down, it will zoom-out, uh horizntally, if you start scrolling up then it will zoom in horizontally, and you can also like click and drag this interface like this either in horizontally or vertically. and then you can also, if you bring your mouse in the y-axis here, and you start scrolling, then it will zoom in and out vertically. so do you have any question so far?

P1: yeah, in the gantt view how task is distributed on each thread?
me: yeah,
P1: ok, thank you. so each, each, you can see that there are couple of rectangular bars, ok so, we are calling this thing interval. so these are basically an execution unit ok. so specifically a particular primitive is being executed at this particular moment, in this CPU core. ok. and lastly, there might be some kind of dependency between these tasks, like, for example, a task, spawns another task, so we could instrument a parent-child type relationship between these task, and we are representing this things as a yellow line. here you can see that, I clicked on this taks, and you can see that there is couple of yellow lines here. this yellow lines represents the parent child dependency. so it clears that, this task comes from this task and it has also this child. ok. so this is the gantt view.  and then here at the top left it is the utilization view, so this utilization view shows among the 16 cpu threds how much are being utilized 
